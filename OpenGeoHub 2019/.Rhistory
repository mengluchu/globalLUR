knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path = 'Figs_geohub/',
echo=T, include = T, warning = FALSE, message = FALSE)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
stdata = c("sp", "sf", "raster")
Stat_methods = c("glmnet", "ranger", "gbm", "xgboost", "party", "caret")
visual = c("RColorBrewer", "ggplot2", "corrplot","tmap", "leaflet", "mapview", "pdp", "vip", "DT", "sparkline")
map = c("maptools")
tidy = c("devtools", "dplyr", "tidyr", "reshape2", "knitr")
other = c("countrycode", "htmlwidgets", "data.table", "Matrix")
packages <- c(stdata, tidy, Stat_methods, visual, map, other)
ipak(packages)
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
install_github("mengluchu/globalLUR/globalLUR/globalLUR")
library(globalLUR)
ls("package:globalLUR")
colorB = brewer.pal(7,"Greens")
colorG = brewer.pal(11,"PiYG")
colorS = brewer.pal(11, "Spectral")
#set.seed(2)
# add data usethis::use_data()
data("merged")
names(data)
data("countrywithppm") # countries with ppm (parts per million)
summary(merged)
datatable(merged, rownames = FALSE, filter = "top", options = list(pageLength = 5, scrollX = T))
#tag missing data to NA
merged_1 = na_if(merged,-1)
#merge roads
merged_mr = merge_roads(merged_1, c(3, 4, 5), keep = F) # keep = T keeps the original roads.
names(merged_mr)
#numeric country
#inde_var$country=as.numeric(inde_var$country)
locations_sf = st_as_sf(merged_mr, coords = c("LONGITUDE","LATITUDE"))
#plot(spmerged["ROAD_1_50"])
# breaks = c(2e+3, 2e+4, 2e+5,5e+5, 2e+6 )
osm_valuemean = tm_shape(locations_sf) +
tm_dots( "value_mean", col = "value_mean", size = 0.05,
popup.vars = c("value_mean", "day_value", "night_value", "ROAD_2_100", "ROAD_2_5000")) + tm_view(basemaps = c('OpenStreetMap'))
#+tm_shape(lnd)+tm_lines()
#filename="C:/Users/Lu000012/Documents/files/GLOBAL_LUR/NO2mean.html"
tmap_save(osm_valuemean, "NO2mean.html")
merged_fp = merged_mr %>% mutate(ratiodn = day_value/night_value) %>% mutate(color = ifelse(ratiodn >1, "red", "blue"))
m  = leaflet(merged_fp) %>%
addTiles() %>% addCircleMarkers(radius = ~value_mean/5, color = ~color, popup =   ~as.character(value_mean),fill = FALSE) %>% addProviderTiles(providers$Esri.NatGeoWorldMap) %>% addMouseCoordinates() %>%
addHomeButton(ext = extent(116.2, 117, 39.7, 40), layer.name = "Beijing") %>% addHomeButton(ext = extent(5, 5.2, 52, 52.2), layer.name = "Utrecht")
saveWidget(m, file = "NO2daynight.html")
countryname = paste(merged_mr$country, countrycode(merged_mr$country, 'iso2c', 'country.name'), sep = ":")
#tag country with ppm
countryname_s_e=ifelse( merged_mr$country %in% countrywithppm[countrywithppm %in% merged_mr$country], paste(countryname,"*", sep = ""), countryname)
merged_mr$countryfullname = countryname_s_e
# use the median for colour
mergedmedian = merged_mr %>% group_by(country) %>% mutate(median =  median(value_mean, na.rm = TRUE))
bp2 <- ggplot(mergedmedian, aes(x=countryfullname, y=value_mean, group=country)) +
labs(x = "Country", y = expression(paste("NO"[2], "  ", mu, "g/", "m"^3)), cex = 1.5) +
geom_boxplot(aes(fill = median)) +
theme(text = element_text(size = 13), axis.text.x = element_text(angle = 90, hjust = 1)) +   scale_fill_distiller(palette = "Spectral")
#   scale_color_brewer(direction = 1)
print(bp2 + ylim(0, 100))
merged_mr %>% na.omit %>% filter(country == "DE") %>% dplyr::select(matches("_value|ROAD|pop|Trop")) %>% cor %>% corrplot(type = "upper", method = "pie", tl.cex = 0.7)
merged_mr %>% na.omit %>% filter(country == "CN") %>% dplyr::select(matches("_value|ROAD|pop|Trop")) %>% cor %>% corrplot(type = "upper", method = "pie", tl.cex = 0.7)
merged_mr %>% na.omit %>% dplyr::select(matches("_value|ROAD|pop|Trop")) %>% cor %>% corrplot(type = "upper", method = "pie", tl.cex = 0.7)
grd_sp <- as_Spatial(locations_sf)
dt.vgm = variogram(value_mean~1, grd_sp)
vip::list_metrics()
pre_mat = subset_grep(inde_var_train, grepstring = "ROAD|pop|value_mean|temp|wind|eleva|coast|I_1|Trop")
vip::list_metrics()
pre_mat = subset_grep(inde_var_train, grepstring = "ROAD|pop|value_mean|temp|wind|eleva|coast|I_1|Trop")
inde_var_train = subset_grep(inde_var[training, ], "ROAD|pop|temp|wind|Rsp|OMI|eleva|coast|I_1|Tropomi|value_mean")
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path = 'Figs_geohub/',
echo=T, include = T, warning = FALSE, message = FALSE)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
#repos='http://cran.muenster.r-project.org'
stdata = c("sp", "sf", "raster")
Stat_methods = c("glmnet", "ranger", "gbm", "xgboost", "party", "caret", "party", "gstat")
visual = c("RColorBrewer", "ggplot2", "corrplot", "tmap", "leaflet", "mapview", "pdp", "vip", "DT", "sparkline")
map = c("maptools")
tidy = c("devtools", "dplyr",  "tidyr", "reshape2", "knitr")
other = c("countrycode", "htmlwidgets", "data.table", "Matrix")
packages <- c(stdata, tidy, Stat_methods, visual, map, other)
ipak(packages)
install_github("mengluchu/globalLUR/globalLUR/globalLUR")
library(globalLUR)
ls("package:globalLUR")
colorB = brewer.pal(7, "Greens")
colorG = brewer.pal(11, "PiYG")
colorS = brewer.pal(11, "Spectral")
#set.seed(2)
# add data usethis::use_data()
data("merged")
names(data)
data("countrywithppm") # countries with ppm (parts per million)
summary(merged)
datatable(merged, rownames = FALSE, filter = "top", options = list(pageLength = 5, scrollX = T))
merged_1 = na_if(merged, -1)
merged_mr = merge_roads(merged_1, c(3, 4, 5), keep = F) # keep = T keeps the original roads.
names(merged_mr)
#numeric country
#inde_var$country=as.numeric(inde_var$country)
locations_sf = st_as_sf(merged_mr, coords = c("LONGITUDE","LATITUDE"))
osm_valuemean = tm_shape(locations_sf) +
tm_dots( "value_mean", col = "value_mean", size = 0.05,
popup.vars = c("value_mean", "day_value", "night_value", "ROAD_2_100", "ROAD_2_5000")) + tm_view(basemaps = c('OpenStreetMap'))
#+tm_shape(lnd)+tm_lines()
tmap_save(osm_valuemean, "NO2mean.html")
merged_fp = merged_mr %>% mutate(ratiodn = day_value/night_value) %>% mutate(color = ifelse(ratiodn >1, "red", "blue"))
m  = leaflet(merged_fp) %>%
addTiles() %>% addCircleMarkers(radius = ~value_mean/5, color = ~color, popup =   ~as.character(value_mean),fill = FALSE) %>% addProviderTiles(providers$Esri.NatGeoWorldMap) %>% addMouseCoordinates() %>%
addHomeButton(ext = extent(116.2, 117, 39.7, 40), layer.name = "Beijing") %>% addHomeButton(ext = extent(5, 5.2, 52, 52.2), layer.name = "Utrecht")
saveWidget(m, file = "NO2daynight.html")
countryname = paste(merged_mr$country, countrycode(merged_mr$country, 'iso2c', 'country.name'), sep = ":")
#tag country with ppm
countryname_s_e=ifelse( merged_mr$country %in% countrywithppm[countrywithppm %in% merged_mr$country], paste(countryname,"*", sep = ""), countryname)
merged_mr$countryfullname = countryname_s_e
# use the median for colour
mergedmedian = merged_mr %>% group_by(country) %>% mutate(median =  median(value_mean, na.rm = TRUE))
bp2 <- ggplot(mergedmedian, aes(x=countryfullname, y=value_mean, group=country)) +
labs(x = "Country", y = expression(paste("NO"[2], "  ", mu, "g/", "m"^3)), cex = 1.5) +
geom_boxplot(aes(fill = median)) +
theme(text = element_text(size = 13), axis.text.x = element_text(angle = 90, hjust = 1)) +   scale_fill_distiller(palette = "Spectral")
#   scale_color_brewer(direction = 1)
print(bp2 + ylim(0, 100))
merged_mr %>% na.omit %>% filter(country == "DE") %>% dplyr::select(matches("_value|ROAD|pop|Trop")) %>% cor %>% corrplot(type = "upper", method = "pie", tl.cex = 0.7)
merged_mr %>% na.omit %>% filter(country == "CN") %>% dplyr::select(matches("_value|ROAD|pop|Trop")) %>% cor %>% corrplot(type = "upper", method = "pie", tl.cex = 0.7)
merged_mr %>% na.omit %>% dplyr::select(matches("_value|ROAD|pop|Trop")) %>% cor %>% corrplot(type = "upper", method = "pie", tl.cex = 0.7)
grd_sp <- as_Spatial(locations_sf)
dt.vgm = variogram(value_mean~1, grd_sp)
plot(dt.vgm)
dt.vgm = variogram(value_mean~1, grd_sp, cutoff = 10)
plot(dt.vgm)
countryvariogram = function(COUN, cutoff){
loca =  locations_sf%>%filter(country == COUN)
grd_sp <- as_Spatial(loca)
dt.vgm = variogram(value_mean~1, grd_sp, cutoff = cutoff)
plot(dt.vgm)
}
countryvariogram("DE", 1)
countryvariogram("US", 1)
countryvariogram("CN", 1) # reason?
#Moran I test
#install.packages("ape", dependencies = TRUE)
#library(ape)
#merged_mrf =  merged_mr%>%filter(country == "US")
#no2.dists <- as.matrix(dist(cbind(merged_mrf$LONGITUDE, merged_mrf$LATITUDE)))
#no2.dists[1:5, 1:5]
#no2.inv <- 1/no2.dists
#diag(no2.inv) <- 0
#no2.inv[1:5, 1:5]
#Moran.I(merged_mrf$value_mean, na.rm = T, no2.inv)
#merged = merge(merged, stat[,-which(names(stat)%in%c("LATITUTE", "LONGITUDE"))], by = "ID", all.x = T)
response_predictor = globalLUR::sampledf(merged_mr, fraction = 0.8, country2digit = "DE", grepstring_rm = "ID|LATITUDE|LONGITUDE|countryfullname")
#Retrieve test, training, and all variables.
test = response_predictor$test
training = response_predictor$training
inde_var = response_predictor$inde_var
inde_var = inde_var %>% dplyr::select(-country)
inde_var_train = subset_grep(inde_var[training, ], "ROAD|pop|temp|wind|Rsp|OMI|eleva|coast|I_1|Tropomi|value_mean")
Training RF using Caret
inde_var_train = subset_grep(inde_var[training, ], "ROAD|pop|temp|wind|Rsp|OMI|eleva|coast|I_1|Tropomi|value_mean")
vip::list_metrics()
pre_mat = subset_grep(inde_var_train, grepstring = "ROAD|pop|value_mean|temp|wind|eleva|coast|I_1|Trop")
rf = ranger(value_mean~ ., data = pre_mat, mtry = 33, num.trees = 2000,importance = "permutation")
rf
# ranger method
importance(rf)
#vip
DF_P_r2 = vi(rf, method = "permute", target = "value_mean", metric = "r2" ) # very clear what method is used and what is the target
DF_P_rmse = vi(rf, method = "permute", target = "value_mean", metric = "rmse")
vip (DF_P_rmse)
vip (DF_P_r2)
set.seed(2)
vip::list_metrics()
pre_mat = subset_grep(inde_var_train, grepstring = "ROAD|pop|value_mean|temp|wind|eleva|coast|I_1|Trop")
rf = ranger(value_mean~ ., data = pre_mat, mtry = 33, num.trees = 2000,importance = "permutation")
rf
# ranger method
importance(rf)
#vip
DF_P_r2 = vi(rf, method = "permute", target = "value_mean", metric = "r2" ) # very clear what method is used and what is the target
DF_P_rmse = vi(rf, method = "permute", target = "value_mean", metric = "rmse")
vip (DF_P_rmse)
vip (DF_P_r2)
p_lm = partial(lm_s, "ROAD_M345_300",plot = TRUE, rug = TRUE)
pre_mat_predictor = pre_mat_s%>%select(-value_mean)
library(GGally)
pre_mat_s = inde_var_train %>% select(value_mean, ROAD_2_50, pop3k, ROAD_M345_300)
lm_s = lm(value_mean~., data = pre_mat_s)
rf_s = ranger(value_mean~ ., data = pre_mat_s, num.trees = 2000, importance = "permutation")
rf_s
pre_mat_predictor = pre_mat_s%>%select(-value_mean)
ggpairs(pre_mat_predictor)
p_lm = partial(lm_s, "ROAD_M345_300",plot = TRUE, rug = TRUE)
plot(p_lm)
p2 = partial(rf_s, "ROAD_M345_300",plot = TRUE, rug = TRUE)
plot(p2)
#slow
pd <- partial(rf_s, pred.var = c("pop3k", "ROAD_M345_300"  ))
install.packages("sf", "stars", "gstat", "units", "tidyverse", "xts", "viridis", "abind")
install.packages("sf", "stars", "gstat", "units", "tidyverse", "xts", "viridis", "abind")
knitr::opts_chunk$set(echo = TRUE)
list.files()
a = list.files()[6]
head(a)
read.csv(a)
list.files()
spinfo = read.csv(list.files()[2])
testdata = read.csv(list.files()[5])
head(spinfo)
length(spinfo)
nrow(spinfo)
nrow(traindata)
traindata = read.csv(list.files()[6])
testdata = read.csv(list.files()[5])
nrow(traindata)
nrow(testdata)
head(traindata)
head(spinfo)
merge(traindata, spinfo, by = id)
merge(traindata, spinfo, by = "id"")
merge(traindata, spinfo, by = "id")
merge(traindata, spinfo)
trsp = merge(traindata, spinfo)
summary(trsp)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
#repos='http://cran.muenster.r-project.org'
stdata = c("sp", "sf", "raster")
Stat_methods = c("glmnet", "ranger", "gbm", "xgboost", "party", "caret", "party", "gstat")
visual = c("RColorBrewer", "ggplot2", "corrplot", "tmap", "leaflet", "mapview", "pdp", "vip", "DT", "sparkline")
map = c("maptools")
tidy = c("devtools", "dplyr",  "tidyr", "reshape2", "knitr")
other = c("countrycode", "htmlwidgets", "data.table", "Matrix", "GGally")
packages <- c(stdata, tidy, Stat_methods, visual, map, other)
ipak(packages)
locations_sf = st_as_sf(trsp, coords = c("X","Y"))
tm_view(basemaps = c('OpenStreetMap'))
locations_sf = st_as_sf(trsp, coords = c("X","Y"))
osm_valuemean = tm_shape(locations_sf) +
tm_dots( "PM10", col = "PM10", size = 0.05,
tm_view(basemaps = c('OpenStreetMap'))
#+tm_shape(lnd)+tm_lines()
tmap_save(osm_valuemean, "PM.html")
osm_valuemean = tm_shape(locations_sf) +
tm_dots( "PM10", col = "PM10", size = 0.05)+
tm_view(basemaps = c('OpenStreetMap'))
#+tm_shape(lnd)+tm_lines()
tmap_save(osm_valuemean, "PM.html")
testsp = merge(testdata, spinfo)
plot(locations_sf)
locations_sf = st_as_sf(tesp, coords = c("X","Y"))
locations_sf = st_as_sf(testsp, coords = c("X","Y"))
plot(locations_sf)
plot(locations_sf)
plot(locations_sf, add=T)
locations_sf = st_as_sf(trsp, coords = c("X","Y"))
plot(locations_sf)
locations_sf = st_as_sf(testsp, coords = c("X","Y"))
plot(locations_sf, add=T)
#osm_valuemean = tm_shape(locations_sf) +
#  tm_dots( "PM10", col = "PM10", size = 0.05)+
#     tm_view(basemaps = c('OpenStreetMap'))
#+tm_shape(lnd)+tm_lines()
#tmap_save(osm_valuemean, "PM.html")
plot(locations_sf)
plot(locations_sf, add=T)
plot(locations_sf)
plot(locations_sf)
locations_sf = st_as_sf(trsp, coords = c("X","Y"))
plot(locations_sf)
plot(locations_sf)
locations_sf = st_as_sf(testsp, coords = c("X","Y"))
plot(locations_sf)
plot(locations_sf, col = "red")
locations_sf = st_as_sf(trsp, coords = c("X","Y"))
plot(locations_sf)
locations_sf = st_as_sf(testsp, coords = c("X","Y"))
plot(locations_sf, col = "red", add =T)
#osm_valuemean = tm_shape(locations_sf) +
#  tm_dots( "PM10", col = "PM10", size = 0.05)+
#     tm_view(basemaps = c('OpenStreetMap'))
#+tm_shape(lnd)+tm_lines()
#tmap_save(osm_valuemean, "PM.html")
plot(locations_sf, col = "red")
plot(locations_sf)
locations_sf = st_as_sf(trsp, coords = c("X","Y"))
plot(locations_sf)
locations_sf = st_as_sf(testsp, coords = c("X","Y"))
plot(locations_sf, col = "red")
knitr::opts_chunk$set(echo = TRUE)
install.packages("stars", "raster")
